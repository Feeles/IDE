ついかする:
  - label: ボス出現
    code: |
      // ボス出現
      feeles.setTimeout(async() => {

          mc.summon(('▼ モンスター', 'エンダードラゴン'), 0, 10, 0);

          mc.gamemode(('▼ ゲームモード', 's'));

          mc.difficulty(('▼ なんいど', 'e'));

          mc.title('〜タイトル〜', ('▼ タイトル', 'title'));

          /*+ アクション */

      }, 1000);
  - label: エージェント
    code: |
      // エージェント
      mc.utils.setInterval(async() => {


          /*+ エージェント*/

      }, 500);
  - label: せってい
    code: |
      // せってい
      mc.utils.setTimeout(async() => {

          mc.gamemode(('▼ ゲームモード', 's'));

          mc.difficulty(('▼ なんいど', 'e'));

          mc.title('〜タイトル〜', ('▼ タイトル', 'title'));

          /*+ アクション */

      }, 0);
  - label: 経験値フィーバー
    code: |
      // 経験値フィーバー
      mc.utils.setInterval(async() => {

          mc.summon(('▼ けいけんち', '経験値オーブ'), 0, 0, 0);

          /*+ アクション */

      }, 200);
  - label: いちどだけ
    code: |
      // いちどだけ
      mc.utils.setTimeout(async() => {


          /*+ アクション */

      }, 1000);
  - label: つねに
    code: |
      // つねに
      mc.utils.setInterval(async() => {


          /*+ アクション */

      }, 1000);
  - label: プレイヤーがうごいたら
    code: |
      mc.player.on(('▼ プレイヤーが', 'うごいた'), async() => {


          /*+ アクション */

      });
  - label: プレイヤーがやられたら
    code: |
      mc.player.on(('▼ プレイヤーが', 'やられた'), async() => {


      	 /*+ アクション */

      });
  - label: ブロックがこわれたら
    code: |
      mc.blocks[('▼ ブロック', '草ブロック')].on('こわれた', async() => {


        /*+ アクション */

      });
  - label: ブロックがおかれたら
    code: |
      mc.blocks[('▼ ブロック', '荒れた土')].on('おかれた', async() => {


        /*+ アクション */

      });
  - label: 空中さんぽ
    code: |+
      // 空中さんぽ
      mc.utils.setInterval(async() => {

          // ランダムな毛の色（すうじ）
          const いろ = Math.random() * 17 >> 0;
      	   mc.setBlock(`wool:${いろ}`, 0, -1, 0);

      }, 100);

  - label: レンキンジュツ
    code: |+
      // レンキンジュツ
      mc.player.on(('▼ プレイヤーが', 'うごいた'), async() => {

          // まえ→あと
          const まえ = ('▼ ブロック', '土'); // を,
          const あと = ('▼ ブロック', '金のブロック'); // にかえる!
          mc.replace(あと, まえ, -1, -1, -1, 1, 1, 1);

      });

  # - label: 超・コオリワタリ
  #   code: |+
  #     // 超・コオリワタリ
  #     mc.player.on(('▼ プレイヤーが', 'うごいた'), async() => {
  #
  #         // 足元をすべてぬりつぶす
  #         const ひろさ = 5;
  #         mc.fill(('▼ ブロック', '氷'), -ひろさ, -1, -ひろさ, ひろさ, -1, ひろさ);
  #
  #     });

  - label:
    code: |+
      // ゲームモード
      mc.gamemode(('▼ ゲームモード', 's'));
      // なんいど
      mc.difficulty(('▼ なんいど', 'n'));
      // ウィザー召喚！
      mc.summon('wither', 40, 10, 0);
      // ウィザーを３０秒でたおす方法
      mc.utils.setInterval(async() => {

          const ターゲット = ('▼ ターゲット', '@e[type=wither]'); // ウィザー
          // となりに TNT をおく
          mc.execute(`execute ${ターゲット} ~+2 ~ ~ setblock ~ ~ ~ tnt`);
          // その下に レッドストーンブロック をおく
          mc.execute(`execute ${ターゲット} ~+2 ~-1 ~ setblock ~ ~ ~ redstone_block`);
          // おとり用の ヒツジ をはなす
          mc.execute(`execute ${ターゲット} ~ ~ ~+10 summon sheep`);

      }, 3000);
